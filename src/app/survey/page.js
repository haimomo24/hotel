'use client'
import React, { useState } from 'react'
import { useRouter } from 'next/navigation'

const Page = () => {
  const router = useRouter()

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    serviceUsed: '',
    // Ph√≤ng ngh·ªâ
    staff: '',
    room: '',
    cleanliness: '',
    facilities: '',
    price: '',
    overall: '',
    // Nh√† h√†ng
    food_quality: '',
    dining_cleanliness: '',
    waiting_time: '',
    service_speed: '',
    restaurant_overall: '',
    // Xe ƒëi·ªán
    driver_attitude: '',
    vehicle_condition: '',
    safety: '',
    convenience: '',
    electric_overall: '',
    // G√≥p √Ω
    suggestion: '',
  })

  const [submitted, setSubmitted] = useState(false)

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData({ ...formData, [name]: value })
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    try {
      const res = await fetch('/api/survey', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      const result = await res.json()
      if (result.success) {
        setSubmitted(true)
        setFormData({
          name: '',
          email: '',
          phone: '',
          serviceUsed: '',
          staff: '',
          room: '',
          cleanliness: '',
          facilities: '',
          price: '',
          overall: '',
          food_quality: '',
          dining_cleanliness: '',
          waiting_time: '',
          service_speed: '',
          restaurant_overall: '',
          driver_attitude: '',
          vehicle_condition: '',
          safety: '',
          convenience: '',
          electric_overall: '',
          suggestion: '',
        })

        setTimeout(() => {
          router.push('/')
        }, 3000)
      } else {
        alert('L·ªói khi g·ª≠i kh·∫£o s√°t: ' + result.message)
      }
    } catch (err) {
      console.error('Survey Submit Error:', err)
      alert('Kh√¥ng th·ªÉ g·ª≠i kh·∫£o s√°t. Vui l√≤ng th·ª≠ l·∫°i sau.')
    }
  }

  const ratings = ['R·∫•t kh√¥ng h√†i l√≤ng', 'Kh√¥ng h√†i l√≤ng', 'B√¨nh th∆∞·ªùng', 'H√†i l√≤ng', 'R·∫•t h√†i l√≤ng']
  const serviceOptions = ['Ph√≤ng ngh·ªâ', 'Nh√† h√†ng', 'Xe ƒëi·ªán']

  return (
    <div className="min-h-screen mt-[80px] bg-[#FAFAFA] py-10 px-4 font-sans">
      <div className="bg-white max-w-3xl mx-auto rounded-lg shadow-md border border-gray-200 p-6 md:p-10">
        <h2 className="text-3xl md:text-4xl text-center text-green-800 mb-8">
          Phi·∫øu Kh·∫£o S√°t Ch·∫•t L∆∞·ª£ng D·ªãch V·ª•
        </h2>

        {submitted && (
          <div className="p-4 mb-6 text-green-800 bg-green-100 border border-green-400 rounded text-center text-base font-medium">
            üéâ C·∫£m ∆°n b·∫°n! Kh·∫£o s√°t ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. ƒêang chuy·ªÉn v·ªÅ trang ch·ªß...
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          <Input label="H·ªç v√† t√™n" name="name" value={formData.name} onChange={handleChange} required />
          <Input label="Email" name="email" value={formData.email} onChange={handleChange} required type="email" />
          <Input label="S·ªë ƒëi·ªán tho·∫°i" name="phone" value={formData.phone} onChange={handleChange} required type="tel" />

          {/* Ch·ªçn d·ªãch v·ª• */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">D·ªãch v·ª• ƒë√£ s·ª≠ d·ª•ng</label>
            <select
              name="serviceUsed"
              value={formData.serviceUsed}
              onChange={handleChange}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-green-600"
            >
              <option value="">-- Ch·ªçn d·ªãch v·ª• --</option>
              {serviceOptions.map((option, idx) => (
                <option key={idx} value={option}>{option}</option>
              ))}
            </select>
          </div>

          {/* N·∫øu ch·ªçn Ph√≤ng ngh·ªâ */}
          {formData.serviceUsed === 'Ph√≤ng ngh·ªâ' && (
            <>
              {[
                { label: 'Th√°i ƒë·ªô ph·ª•c v·ª• c·ªßa nh√¢n vi√™n', name: 'staff' },
                { label: 'Ch·∫•t l∆∞·ª£ng ph√≤ng ngh·ªâ', name: 'room' },
                { label: 'S·ª± s·∫°ch s·∫Ω v√† v·ªá sinh', name: 'cleanliness' },
                { label: 'Ti·ªán nghi v√† c∆° s·ªü v·∫≠t ch·∫•t', name: 'facilities' },
                { label: 'Gi√° c·∫£ so v·ªõi ch·∫•t l∆∞·ª£ng', name: 'price' },
                { label: 'T·ªïng quan v·ªÅ tr·∫£i nghi·ªám d·ªãch v·ª•', name: 'overall' },
              ].map((item) => (
                <RatingGroup key={item.name} item={item} value={formData[item.name]} onChange={handleChange} ratings={ratings} />
              ))}
            </>
          )}

          {/* N·∫øu ch·ªçn Nh√† h√†ng */}
          {formData.serviceUsed === 'Nh√† h√†ng' && (
            <>
              {[
                { label: 'Ch·∫•t l∆∞·ª£ng m√≥n ƒÉn', name: 'food_quality' },
                { label: 'S·ª± s·∫°ch s·∫Ω c·ªßa khu v·ª±c ƒÉn u·ªëng', name: 'dining_cleanliness' },
                { label: 'Th·ªùi gian ch·ªù m√≥n ƒÉn', name: 'waiting_time' },
                { label: 'T·ªëc ƒë·ªô ph·ª•c v·ª•', name: 'service_speed' },
                { label: 'ƒê√°nh gi√° t·ªïng quan v·ªÅ nh√† h√†ng', name: 'restaurant_overall' },
              ].map((item) => (
                <RatingGroup key={item.name} item={item} value={formData[item.name]} onChange={handleChange} ratings={ratings} />
              ))}
            </>
          )}

          {/* N·∫øu ch·ªçn Xe ƒëi·ªán */}
          {formData.serviceUsed === 'Xe ƒëi·ªán' && (
            <>
              {[
                { label: 'Th√°i ƒë·ªô c·ªßa t√†i x·∫ø', name: 'driver_attitude' },
                { label: 'T√¨nh tr·∫°ng ph∆∞∆°ng ti·ªán', name: 'vehicle_condition' },
                { label: 'M·ª©c ƒë·ªô an to√†n', name: 'safety' },
                { label: 'S·ª± thu·∫≠n ti·ªán', name: 'convenience' },
                { label: 'ƒê√°nh gi√° t·ªïng quan v·ªÅ d·ªãch v·ª• xe ƒëi·ªán', name: 'electric_overall' },
              ].map((item) => (
                <RatingGroup key={item.name} item={item} value={formData[item.name]} onChange={handleChange} ratings={ratings} />
              ))}
            </>
          )}

          {/* G√≥p √Ω */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">G√≥p √Ω / ƒê·ªÅ xu·∫•t</label>
            <textarea
              name="suggestion"
              value={formData.suggestion}
              onChange={handleChange}
              rows="4"
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-green-600 resize-none"
              placeholder="H√£y chia s·∫ª g√≥p √Ω ho·∫∑c mong mu·ªën c·∫£i thi·ªán d·ªãch v·ª•..."
            ></textarea>
          </div>

          {/* N√∫t g·ª≠i */}
          <div className="text-center pt-4">
            <button
              type="submit"
              className="bg-green-700 text-white px-8 py-2 rounded-full hover:bg-green-800 transition"
            >
              G·ª≠i
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

const Input = ({ label, name, value, onChange, required = false, type = 'text' }) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      required={required}
      className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-green-600"
      placeholder={`Nh·∫≠p ${label.toLowerCase()}`}
    />
  </div>
)

const RatingGroup = ({ item, value, onChange, ratings }) => (
  <div className="text-sm">
    <label className="block font-medium text-gray-700 mb-1">{item.label}</label>
    <div className="grid grid-cols-5 gap-4">
      {ratings.map((rate, idx) => (
        <label key={idx} className="flex items-center gap-2">
          <input
            type="radio"
            name={item.name}
            value={rate}
            checked={value === rate}
            onChange={onChange}
          />
          <span className="text-gray-600 text-xs">{rate}</span>
        </label>
      ))}
    </div>
  </div>
)

export default Page
